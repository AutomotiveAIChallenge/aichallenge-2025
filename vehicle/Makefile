SHELL := /bin/bash
# Êó¢„Å´„Ç≥„É≥„ÉÜ„Éä„ÅåÁ´ã„Å°‰∏ä„Åå„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„É≠„Ç∞„ÅÆË°®Á§∫„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
# autoware„ÅÆ„ÅøËµ∑Âãï„Éª„É≠„Ç∞Ë°®Á§∫
autoware:
	docker compose up -d autoware
	docker compose logs -f autoware

# racing kart„ÅÆËµ∑Âãï„Éª„É≠„Ç∞Ë°®Á§∫
driver:
	docker compose up -d driver
	docker compose logs -f driver

# zenoh„ÅÆËµ∑Âãï„Éª„É≠„Ç∞Ë°®Á§∫
zenoh:
	docker compose up -d zenoh
	docker compose logs -f zenoh

# racing_kart_interface„ÅÆbash„ÇíËµ∑Âãï
driver-bash:
	docker compose run driver bash

# aic„Ç≥„É≥„ÉÜ„Éä„Å´„Å¶ros2 bag record -a
rosbag:
	docker compose up -d rosbag 
	docker compose logs -f rosbag

# aichallege-2025„Å®racing_kart_interface‰∏°Êñπ„ÅÆtopic„ÇíË®òÈå≤ÔºàÂÆüÈ®ìÁî®Ôºâ
rosbag-all:
	-tmux send-keys -t rosbag C-c
	sleep 5
	tmux new-session -d -s rosbag  "bash -c ' \
		source ~/msg_install/setup.bash && \
		ros2 bag record -a \
			-s mcap \
			-d 60 \
			-o log/rosbag2_$$(date +%Y_%m_%d_%H_%M_%S) \
			--compression-mode file \
			--compression-format zstd'"

# Autoware„Å®racing kart„Å®zenoh„ÅÆËµ∑Âãï
run-full-system:
	docker compose up -d driver
	docker compose up -d autoware
	$(MAKE) rosbag-all
# docker compose up -d rosbag
	sleep 5
	docker compose up -d zenoh
	docker compose logs -f autoware driver zenoh 2>&1 | tee log/full_log.log | stdbuf -oL grep -E "(ERROR|WARN)"

# Download submission data by asking for credentials interactively
# Usage:
#   make download [SUBMISSION_ID=<id>]
download:
	@read -p "Enter Username: " USERNAME; \
	read -sp "Enter Password: " PASSWORD; \
	echo ""; \
	if [ -z "$$USERNAME" ] || [ -z "$$PASSWORD" ]; then \
		echo "\nError: USERNAME and PASSWORD must be provided."; \
		exit 1; \
	fi; \
	echo "Downloading submission data..."; \
	CMD="python3 ../download_latest_submission.py --username='$$USERNAME' --password='$$PASSWORD'"; \
	if [ -n "$(SUBMISSION_ID)" ]; then \
		CMD="$$CMD --submission-id='$(SUBMISSION_ID)'"; \
	fi; \
	OUTPUT=$$(eval $$CMD 2>&1); \
	echo "$$OUTPUT"; \
	GREPPED_LINE=$$(echo "$$OUTPUT" | grep "File saved to:"); \
	TARBALL_PATH=$$(echo "$$GREPPED_LINE" | awk '{print $$NF}' | tr -d '\r'); \
	if [ -n "$$TARBALL_PATH" ] && [ -f "$$TARBALL_PATH" ]; then \
		echo "----------------------------------------"; \
		echo "‚úÖ Downloaded file found: $$TARBALL_PATH"; \
		SUBMIT_DIR_PATH="/home/$$USER/aichallenge-2025/aichallenge/workspace/src/aichallenge_submit"; \
		EXTRACT_DIR_PATH="/home/$$USER/aichallenge-2025/aichallenge/workspace/src"; \
		echo "üßπ Deleting existing directory: $$SUBMIT_DIR_PATH"; \
		rm -rf "$$SUBMIT_DIR_PATH"; \
		echo "üì¶ Extracting archive to: $$SUBMIT_DIR_PATH/"; \
		tar -xzf "$$TARBALL_PATH" -C "$$EXTRACT_DIR_PATH"; \
		rm  "$$TARBALL_PATH"; \
		echo "Extraction completed successfully."; \
		echo "----------------------------------------"; \
	else \
		echo "----------------------------------------"; \
		echo "‚ö†Ô∏è Extraction failed: Could not find a valid file to extract."; \
		echo "----------------------------------------"; \
	fi
	@echo "Process finished."

# autoware„ÅÆbuild„ÅÆ„Åø
build-autoware:
	docker compose up -d aic-build
	docker compose logs -f aic-build

# driver„ÅÆbuild„ÅÆ„Åø
build-driver:
	docker compose up -d driver-build
	docker compose logs -f driver-build

# rviz„ÅÆËµ∑Âãï„Éª„É≠„Ç∞Ë°®Á§∫
rviz2:
	docker compose stop rviz2
	docker compose up -d rviz2
	docker compose logs -f rviz2

# „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åã„Çâ„Éì„É´„Éâ„ÉªÂÆüË°å„Åæ„ÅßÂÖ®„Å¶Ë°å„ÅÜ
all: download
	docker compose up -d aic-build driver zenoh autoware rosbag
	docker compose logs -f aic-build driver zenoh autoware rosbag
